# Docker Compose configuration for Claude Code AI Collaboration MCP Server
# Includes the main server, Redis cache, and monitoring services

version: '3.8'

services:
  # Main MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: claude-mcp-server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MCP_PROTOCOL=sse
      - MCP_PORT=3000
      - MCP_HOST=0.0.0.0
      - MCP_DEFAULT_PROVIDER=deepseek
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./config/production.yaml:/app/config/production.yaml:ro
    depends_on:
      - redis
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: claude-mcp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - mcp-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Insight (Optional - for Redis monitoring)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: claude-mcp-redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - RIPORT=8001
    volumes:
      - redis-insight-data:/db
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Prometheus (Optional - for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-mcp-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - mcp-network
    profiles:
      - monitoring

  # Grafana (Optional - for metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: claude-mcp-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mcp-network
    profiles:
      - monitoring
    depends_on:
      - prometheus

volumes:
  redis-data:
    driver: local
  redis-insight-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  mcp-network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
    volumes:
      - .:/app
      - /app/node_modules
      - /app/dist
    command: pnpm run dev